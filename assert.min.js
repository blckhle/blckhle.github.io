/**
 * Minified by jsDelivr using UglifyJS v3.1.10.
 * Original file: /npm/node-assert@0.0.1/assert.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var assert=require("assert"),format=require("util").format,basicTypeAssertions={isBoolean:function(s){return"boolean"==typeof s},isFunction:function(s){return"function"==typeof s},isNumber:function(s){return"number"==typeof s&&!isNaN(s)&&isFinite(s)},isObject:function(s){return"object"==typeof s&&null!==s},isString:function(s){return"string"==typeof s}},advancedTypeAssertions={isTypeOf:function(s,e){return typeof s===e},isInstanceOf:function(s,e){return s instanceof e}},Assert=module.exports;Assert.ASSERTION_LEVELS={NONE:{level:"none",fn:function(){}},WARN:{level:"warn",fn:function(s){console.warn(JSON.stringify({op:"assertionError",msg:s.message,stack:s.startStackFunction}))}},ASSERT:{level:"assert",fn:function(s){throw new assert.AssertionError({message:s.message,expected:s.expected,actual:s.actual,operator:s.operator,startStackFunction:s.startStackFunction})}}},Assert.assertFn=function(s){switch(process.env["NODE_ASSERT"]){case Assert.ASSERTION_LEVELS.ASSERT.level:return Assert.assertionEnabled=!0,Assert.ASSERTION_LEVELS.ASSERT.fn;case Assert.ASSERTION_LEVELS.WARN.level:return Assert.assertionEnabled=!0,Assert.ASSERTION_LEVELS.WARN.fn;default:return Assert.assertionEnabled=!1,Assert.ASSERTION_LEVELS.NONE.fn}}(),Object.keys(basicTypeAssertions).forEach(function(s){var e=basicTypeAssertions[s],t=s.slice(2),r=t.toLowerCase();Assert["is"+t]=function(s,a){if(Assert.assertionEnabled&&!e(s)){var n=format("%s should be of type %s but is of type %s. ("+s+")",a,r,typeof s);Assert.assertFn({message:n,expected:r,actual:typeof s,operator:"typeof",startStackFunction:"is"+t})}},Assert["isOptional"+t]=function(s,e){Assert.assertionEnabled&&void 0!==s&&Assert["is"+t](s,e)},Assert["isArrayOf"+t]=function(s,a){if(Assert.assertionEnabled){var n;Array.isArray(s)||(n=format("%s should be an array but is of type %s. ("+s+")",a,typeof s),Assert.assertFn({message:n,expected:"array",actual:typeof s,operator:"typeof",startStackFunction:"isArrayOf"+t}));for(var o=0;o<s.length;o++)e(s[o])||(n=format("Index %d in array %s should be a %s but is a %s. ("+s+")",o,a,r,typeof s),Assert.assertFn({message:n,expected:r,actual:typeof s,operator:"typeof",startStackFunction:"isArrayOf"+t}))}},Assert["isOptionalArrayOf"+t]=function(s,e){Assert.assertionEnabled&&void 0!==s&&Assert["isArrayOf"+t](s,e)}}),Object.keys(advancedTypeAssertions).forEach(function(s){var e=advancedTypeAssertions[s],t=s.slice(2);Assert["is"+t]=function(s,r,a){if(Assert.assertionEnabled&&!e(s,r)){var n=format("%s should be of type %s but is of type %s. ("+s+")",a,r,typeof s);Assert.assertFn({message:n,expected:r,actual:typeof s,operator:"typeof",startStackFunction:"is"+t})}},Assert["isOptional"+t]=function(s,e,r){Assert.assertionEnabled&&void 0!==s&&Assert["is"+t](s,e,r)},Assert["isArrayOf"+t]=function(s,r,a){if(Assert.assertionEnabled){var n;Array.isArray(s)||(n=format("%s should be an array but is of type %s. ("+s+")",a,typeof s),Assert.assertFn({message:n,expected:"array",actual:typeof s,operator:"typeof",startStackFunction:"isArrayOf"+t}));for(var o=0;o<s.length;o++)e(s[o],r)||(n=format("Index %d in array %s should be a %s but is a %s. ("+s+")",o,a,r,typeof s),Assert.assertFn({message:n,expected:r,actual:typeof s,operator:"typeof",startStackFunction:"isArrayOf"+t}))}},Assert["isOptionalArrayOf"+t]=function(s,e,r){Assert.assertionEnabled&&void 0!==s&&Assert["isArrayOf"+t](s,e,r)}}),Object.keys(assert).forEach(function(s){Assert[s]="AssertionError"!==s?function(){Assert.assertionEnabled&&assert[s].apply(assert[s],arguments)}:assert[s]});
//# sourceMappingURL=/sm/47980cc1541b856b2817ffe1fae03f46b7966d3f8a10779567a87832dbe56272.map